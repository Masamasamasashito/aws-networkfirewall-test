AWSTemplateFormatVersion: 2010-09-09
Resources:
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "192.0.0.0/16"
      Tags:
        - Key: Name
          Value: NetworkFirewallTest-VPC
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "192.0.1.0/24"
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: NetworkFirewallTest-PrivateSubnet
  FirewallSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "192.0.2.0/24"
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: NetworkFirewallTest-FirewallSubnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: "192.0.3.0/24"
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: NetworkFirewallTest-PublicSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: NetworkFirewallTest-InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
      
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet
      AllocationId: !GetAtt NATEIP.AllocationId
      Tags:
        - Key: Name
          Value: NetworkFirewallTest-NATGateway
  NATEIP:
    Type: AWS::EC2::EIP

  NetworkFirewall:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName: NetworkFirewallTest-NetworkFirewall
      FirewallPolicyArn: !Ref NetworkFirewallPolicy
      VpcId: !Ref VPC
      SubnetMappings:
        - SubnetId: !Ref FirewallSubnet
      Tags:
        - Key: Name
          Value: NetworkFirewallTest-NetworkFirewall
  NetworkFirewallPolicy:
    Type: AWS::NetworkFirewall::FirewallPolicy
    Properties:
      FirewallPolicyName: NetworkFirewallTest-NetworkFirewallPolicy
      FirewallPolicy:
        StatelessDefaultActions:
          - 'aws:forward_to_sfe' 
        StatelessFragmentDefaultActions:
          - 'aws:forward_to_sfe'
        StatefulRuleGroupReferences:
          - ResourceArn: !Ref StatefulRuleGroup
      Tags:
        - Key: Name
          Value: NetworkFirewallTest-NetworkFirewallPolicy
  StatefulRuleGroup:
    Type: AWS::NetworkFirewall::RuleGroup
    Properties:
      RuleGroupName: NetworkFirewallTest-StatefulRuleGroupDomainList
      Type: STATEFUL
      Capacity: 100
      RuleGroup:
        RuleVariables:
          IPSets:
            HOME_NET:
              Definition:
                - "192.0.0.0/16"
        RulesSource:
          RulesSourceList:
            Targets:
              - "www.yahoo.co.jp"
              - ".ap-northeast-1.amazonaws.com"
            TargetTypes:
              - "TLS_SNI"
              - "HTTP_HOST"
            GeneratedRulesType: "ALLOWLIST"
      Tags:
        - Key: Name
          Value: NetworkFirewallTest-StatefulRuleGroupDomainList


  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: NetworkFirewallTest-PrivateRouteTable
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      VpcEndpointId: !Select ["1", !Split [":", !Select ["0", !GetAtt NetworkFirewall.EndpointIds]]]
  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  FirewallRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: NetworkFirewallTest-FirewallRouteTable
  FirewallRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref FirewallRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway
  FirewallRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FirewallRouteTable
      SubnetId: !Ref FirewallSubnet
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: NetworkFirewallTest-PublicRouteTable
  PublicRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  PublicRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "192.0.1.0/24"
      VpcEndpointId: !Select ["1", !Split [":", !Select ["0", !GetAtt NetworkFirewall.EndpointIds]]]
  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "NetworkFirewallTest-InstanceSecurityGroup"
      GroupName: "AllowAll"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: NetworkFirewallTest-InstanceSecurityGroup

  RoleForSSM:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Tags:
        - Key: Name
          Value: NetworkFirewallTest-Instance-Iam-Role

  InstanceProfileForSSM:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref RoleForSSM
  
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-03d79d440297083e3
      InstanceType: t2.micro
      NetworkInterfaces:
        - DeviceIndex: "0"
          SubnetId: !Ref PrivateSubnet
          GroupSet:
            - !Ref InstanceSecurityGroup
      IamInstanceProfile: !Ref InstanceProfileForSSM
      Tags:
        - Key: Name
          Value: NetworkFirewallTest-Instance
    DependsOn:
      - NetworkFirewall
